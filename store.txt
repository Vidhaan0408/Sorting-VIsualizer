from django.test import TestCase, SimpleTestCase
from django.shortcuts import reverse
from django.contrib.auth.models import User
from django.test import Client
from django.test import TransactionTestCase, Client
from django.test import TransactionTestCase, Client
from django.conf import settings
from django.contrib.auth import login
from django.http import HttpRequest
from django.test.client import Client


class TestClient(Client):

   	def login_user(self, user):
        
        """
        Login as specified user, does not depend on auth backend (hopefully)

        This is based on Client.login() with a small hack that does not
        require the call to authenticate()
        """
        if not 'django.contrib.sessions' in settings.INSTALLED_APPS:
            raise AssertionError("Unable to login without django.contrib.sessions in INSTALLED_APPS")
        user.backend = "%s.%s" % ("django.contrib.auth.backends",
                                  "ModelBackend")
        engine = import_module(settings.SESSION_ENGINE)

        # Create a fake request to store login details.
        request = HttpRequest()
        if self.session:
            request.session = self.session
        else:
            request.session = engine.SessionStore()
        login(request, user)

        # Set the cookie to represent the session.
        session_cookie = settings.SESSION_COOKIE_NAME
        self.cookies[session_cookie] = request.session.session_key
        cookie_data = {
            'max-age': None,
            'path': '/',
            'domain': settings.SESSION_COOKIE_DOMAIN,
            'secure': settings.SESSION_COOKIE_SECURE or None,
            'expires': None,
        }
        self.cookies[session_cookie].update(cookie_data)

        # Save the session values.
        request.session.save()
	

  	def test_login(self):
		self.client = TestClient()
		self.user = User(username="eve")
		self.user.save()
		self.client.login_user(self.user)









#Create your tests here.

# class HomePageTests(SimpleTestCase):
# 	def setUp(self):
# 		self.user = User.objects.create(username='testuser')
# 		self.user.set_password('hello')
# 		self.user.save()

# 	def test_login(self):
# 		login = self.client.login(username='testuser', password='hello')
# 		self.assertTrue(login) 


	



	# def test_home_status_code(self):
	# 	response = self.client.get('/')
	# 	self.assertEquals(response.status_code,200)

	# def test_signIn_status_code(self):
	# 	response = self.client.get('/accounts/signIn')
	# 	self.assertEquals(response.status_code,200)

	# def test_register_status_code(self):
	# 	response = self.client.get('/accounts/register')
	# 	self.assertEquals(response.status_code,200) 


	# def test_signIn_url_name(self):
	# 	response = self.client.get(reverse('signIn'))
	# 	self.assertEquals(response.status_code, 200)

	# def test_correct_template_signIn(self):
	# 	response = self.client.get(reverse('signIn'))
	# 	self.assertEquals(response.status_code, 200)
	# 	self.assertTemplateUsed(response, 'signIn.html')

# from django.test import TestCase, Client, LiveServerTestCase
# from django.utils import timezone
# #from .models import Post
# from django.contrib.auth.models import User

# ####Lines removed for brevity####

# class AdminTest(LiveServerTestCase):
#     #fixtures = ['users.json']

#     def setUp(self):
#         self.client = Client()

#     def test_login(self):
#         # Get login page
#         response = self.client.get('/admin/login/?next=/admin/')

#         # Check response code
#         self.assertEquals(response.status_code, 200)

#         # Check 'Log in' in response
#         #self.assertTrue(b'Log in' in response.content)

#         # Log the user in
#         self.client.login(username='vidhaan', password="126789")

#         # Check response code
#         response = self.client.get('/admin/')
#         self.assertEquals(response.status_code, 302)

#         # Check 'Log out' in response
#         #self.assertTrue(b'Log out' in response.content)

# # c = Client()
# # response = c.login(username = 'vidhaan', password = '1236789')

# # class LoginTest():






# from django.conf import settings
# from django.contrib.auth import login
# from django.http import HttpRequest
# from django.test.client import Client
# from django.contrib.auth.models import User



# class TestClient(Client):

#     def login_user(self, user):
#         """
#         Login as specified user, does not depend on auth backend (hopefully)

#         This is based on Client.login() with a small hack that does not
#         require the call to authenticate()
#         """
#         if not 'django.contrib.sessions' in settings.INSTALLED_APPS:
#             raise AssertionError("Unable to login without django.contrib.sessions in INSTALLED_APPS")
#         user.backend = "%s.%s" % ("django.contrib.auth.backends",
#                                   "ModelBackend")
#         engine = import_module(settings.SESSION_ENGINE)

#         # Create a fake request to store login details.
#         request = HttpRequest()
#         if self.session:
#             request.session = self.session
#         else:
#             request.session = engine.SessionStore()
#         login(request, user)

#         # Set the cookie to represent the session.
#         session_cookie = settings.SESSION_COOKIE_NAME
#         self.cookies[session_cookie] = request.session.session_key
#         cookie_data = {
#             'max-age': None,
#             'path': '/',
#             'domain': settings.SESSION_COOKIE_DOMAIN,
#             'secure': settings.SESSION_COOKIE_SECURE or None,
#             'expires': None,
#         }
#         self.cookies[session_cookie].update(cookie_data)

#         # Save the session values.
#         request.session.save()

#     def test_login(self):
#         client = TestClient()
#         user = User(username="eve")
#         user.save()
#         client.login_user(user)


python3 manage.py test functional_tests

